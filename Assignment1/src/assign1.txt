Script started on Tue 29 Oct 2019 10:34:36 PM EDT
]0;cosgrovb@alpha: ~/COMP2120/Assignment1/src[01;32mcosgrovb@alpha[00m:[01;34m~/COMP2120/Assignment1/src[00m$ exitjava ass1.PalindromeTesterc ass1/PalindromeTester.java[17Pcat ass1/in.txtPalindromeTester.java[6P.java
/*Author: Blair Cosgrove
 * ID: 104992533
 * Date: 10/29/2019
 */
package ass1;

import java.lang.*;
import java.util.*;
import java.io.*;

public class Palindrome {
	
	//  Default Constructor.
	public Palindrome()
	{
		
	}

	/**
	 * Checks if a given String is a palindrome.
	 * @param l1 A String.
	 * @return True if it is a palindrome and false if not.
	 */
	public boolean isPalindrome(String l1)
	{
		String reverse = "";
		
		//	Loop to copy l1 into reverse backwards.
		for (int i = 0; i < l1.length(); i++)
		{
			reverse += l1.charAt(l1.length() - i - 1);
		}
		
		//	Compares l1 and reverse to determine if they are equal.
		if (l1.equals(reverse))
			return true;
		else
			return false;
	}
	
	/**
	 * Checks if a given string is a mirrored String.
	 * @param l2 A String.
	 * @return True if it is a mirrored string.
	 */
	public boolean isMirrored(String l2)
	{
		char c;		//	Holds a char from the string for comparing.
		
		//	Loop to compare characters starting with the first and 
		//	last and working it's way in.
		for (int i = 0; i < l2.length()/2; i++)
		{
			//	Switch case to determine if the char is a certain 
			//	subset of characters.
			switch (l2.charAt(i))
			{
				case 'A': 
					if (l2.charAt(l2.length() - 1 - i) == 'A')
						break;
				case 'E': 
					if (l2.charAt(l2.length() - 1 - i) == '3')
						break;
				case 'H': 
					if (l2.charAt(l2.length() - 1 - i) == 'H')
						break;
				case 'I': 
					if (l2.charAt(l2.length() - 1 - i) == 'I')
						break;
				case 'J': 
					if (l2.charAt(l2.length() - 1 - i) == 'L')
						break;
				case 'L': 
					if (l2.charAt(l2.length() - 1 - i) == 'J')
						break;
				case 'M': 
					if (l2.charAt(l2.length() - 1 - i) == 'M')
						break;
				case 'O': 
					if (l2.charAt(l2.length() - 1 - i) == 'O')
						break;
				case 'S': 
					if (l2.charAt(l2.length() - 1 - i) == '2')
						break;
				case 'T': 
					if (l2.charAt(l2.length() - 1 - i) == 'T')
						break;
				case 'U': 
					if (l2.charAt(l2.length() - 1 - i) == 'U')
						break;
				case 'V': 
					if (l2.charAt(l2.length() - 1 - i) == 'V')
						break;
				case 'W': 
					if (l2.charAt(l2.length() - 1 - i) == 'W')
						break;
				case 'X': 
					if (l2.charAt(l2.length() - 1 - i) == 'X')
						break;
				case 'Y': 
					if (l2.charAt(l2.length() - 1 - i) == 'Y')
						break;
				case 'Z': 
					if (l2.charAt(l2.length() - 1 - i) == '5')
						break;
				case '1': 
					if (l2.charAt(l2.length() - 1 - i) == '1')
						break;
				case '2': 
					if (l2.charAt(l2.length() - 1 - i) == 'S')
						break;
				case '3': 
					if (l2.charAt(l2.length() - 1 - i) == 'E')
						break;
				case '5': 
					if (l2.charAt(l2.length() - 1 - i) == 'Z')
						break;
				case '8': 
					if (l2.charAt(l2.length() - 1 - i) == '8')
						break;
				default:
					return false;	//	if not those characters or if corresponding positions do not match.
			}
		}
		
		return true;
	}
	
	/**
	 * Checks if a given String is a mirrored palindrome
	 * @param l3 A String.
	 * @return True if it is both a palindrome and mirrored String, else false.
	 */
	public boolean isMirrorPalindrome(String l3)
	{
		if (isPalindrome(l3) && isMirrored(l3))
			return true;
		else
			return false;
	}
}
]0;cosgrovb@alpha: ~/COMP2120/Assignment1/src[01;32mcosgrovb@alpha[00m:[01;34m~/COMP2120/Assignment1/src[00m$ cat ass1/Palindrome.javaexit[Kjava ass1.PalindromeTesterc ass1/PalindromeTester.java[17Pcat ass1/in.txtPalindromeTester.java
/* Author: Blair Cosgrove
 * ID: 104992533		
 * Date: 10/29/2019
 */
package ass1;

import java.util.*;
import java.io.*;
import java.lang.*;

public class PalindromeTester {

	public static void main(String[] args) {
		String line;
		Scanner sc = new Scanner(System.in);
		
		//	Loop for processing Strings until no more.
		while(sc.hasNext())
		{
			line = sc.next();
			process(line);
		}
	}
	
	/**
	 * Processes a string to determine if it 
	 * is a palindrome, mirrored string or mirrored palindrome.
	 * @param line A String to be processed.
	 */
	public static void process(String line)
	{
		Palindrome p1 = new Palindrome();	//	Instantiates a new Palindrome.
		
		//	Calls functions from p1 to determine what it is.
		if (p1.isMirrorPalindrome(line))
		{
			System.out.println(line + " -- " + "is a mirrored palindrome.");
		}
		else if (p1.isMirrored(line))
		{
			System.out.println(line + " -- " + "is a mirrored string.");
		}
		else if (p1.isPalindrome(line))
		{
			System.out.println(line + " -- " + "is a regular palindrome.");
		}
		else
		{
			System.out.println(line + " -- " + "is not a palindrome.");
		}
	}

}
]0;cosgrovb@alpha: ~/COMP2120/Assignment1/src[01;32mcosgrovb@alpha[00m:[01;34m~/COMP2120/Assignment1/src[00m$ cat ass1/PalindromeTester.java[6P.javaexit[Kcat ass1/Palindrome.javaexit[Kjava ass1.PalindromeTesterc ass1/PalindromeTester.java[17Pcat ass1/in.txt
NOTAPALINDROME 
ISAPALINILAPASI 
2A3MEAS 
ATOYOTA]0;cosgrovb@alpha: ~/COMP2120/Assignment1/src[01;32mcosgrovb@alpha[00m:[01;34m~/COMP2120/Assignment1/src[00m$ cat ass1/in.txt[Kcat ass1/in.txtPalindromeTester.java[6P.javaexit[Kjava ass1.PalindromeTesterc ass1/PalindromeTester.java
]0;cosgrovb@alpha: ~/COMP2120/Assignment1/src[01;32mcosgrovb@alpha[00m:[01;34m~/COMP2120/Assignment1/src[00m$ javac ass1/PalindromeTester.java[17Pcat ass1/in.txtPalindromeTester.java[6P.javaexit[Kjava ass1.PalindromeTester < ass1/in.txt
NOTAPALINDROME -- is not a palindrome.
ISAPALINILAPASI -- is a regular palindrome.
2A3MEAS -- is a mirrored string.
ATOYOTA -- is a mirrored palindrome.
]0;cosgrovb@alpha: ~/COMP2120/Assignment1/src[01;32mcosgrovb@alpha[00m:[01;34m~/COMP2120/Assignment1/src[00m$ ls - l[K[Kl
total 3
drwxr-xr-x 2 cosgrovb temp  7 Oct 29 22:25 [0m[01;34mass1[0m
-rw-r--r-- 1 cosgrovb temp  0 Oct 29 22:34 assign1.txt
-rw-r--r-- 1 cosgrovb temp 23 Oct 23 17:32 module-info.java
]0;cosgrovb@alpha: ~/COMP2120/Assignment1/src[01;32mcosgrovb@alpha[00m:[01;34m~/COMP2120/Assignment1/src[00m$ cd ass1
]0;cosgrovb@alpha: ~/COMP2120/Assignment1/src/ass1[01;32mcosgrovb@alpha[00m:[01;34m~/COMP2120/Assignment1/src/ass1[00m$ ls -l
total 12
-rw-r--r-- 1 cosgrovb temp   52 Oct 29 17:43 in.txt
-rw-r--r-- 1 cosgrovb temp 1733 Oct 29 22:25 Palindrome.class
-rw-r--r-- 1 cosgrovb temp 3226 Oct 29 22:17 Palindrome.java
-rw-r--r-- 1 cosgrovb temp 1292 Oct 29 22:35 PalindromeTester.class
-rw-r--r-- 1 cosgrovb temp 1185 Oct 29 17:45 PalindromeTester.java
]0;cosgrovb@alpha: ~/COMP2120/Assignment1/src/ass1[01;32mcosgrovb@alpha[00m:[01;34m~/COMP2120/Assignment1/src/ass1[00m$ exit
exit

Script done on Tue 29 Oct 2019 10:36:15 PM EDT
