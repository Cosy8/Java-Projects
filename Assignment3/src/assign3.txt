Script started on Fri 29 Nov 2019 05:37:14 PM EST
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src[00m$ cd ass3
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src/ass3[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src/ass3[00m$ cat *.java
//	Assignment 3
//	Blair Cosgrove (104992533)
//	11/25/2019

package ass3;

public class AIPlayer extends Player
{
	/**
	 * Allows the AI to make a move.
	 */
	public void play(Board gameboard) 
	{
		int ranX;
		int ranY;
		
		//	Loop to find an empty block to place the corresponding symbol.
		do
		{
			ranX = (int) (Math.random() * 3) ;
			ranY = (int) (Math.random() * 3) ;
		}
		while(gameboard.gameboard[ranX][ranY].getState() != "EMPTY");
		
		gameboard.gameboard[ranX][ranY].setState(super.symbol);
		gameboard.makeMove();
	}

}
//	Assignment 3
//	Blair Cosgrove (104992533)
//	11/25/2019

package ass3;

public class Block 
{
	private String state;	//	EMPTY, X, or Y
	
	//	Default constructor.
	public Block()
	{
		state = "EMPTY";	//	Default state.
	}
	
	/**
	 * Sets the state of the block.
	 * @param state The state to set.
	 */
	public void setState(String state)
	{
		this.state = state;
	}
	
	/**
	 * Returns the state of the block.
	 * @return The state of the block.
	 */
	public String getState()
	{
		return state;
	}
	
	/**
	 * Returns " " if the state is "EMPTY", else return either X or O.
	 */
	public String toString()
	{
		if (state == "EMPTY")
		{
			return " ";
		}
		else 
		{
			return state;
		}
	}
}
//	Assignment 3
//	Blair Cosgrove (104992533)
//	11/25/2019

package ass3;

public class Board implements Global
{
	Block[][] gameboard;	//	The gameboard, 2D array of 9 blocks.
	
	//	Default constructor
	public Board()
	{
		gameboard = new Block[3][3];
		
		//	Loop to instantiate the array of Blocks.
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				gameboard[i][j] = new Block();
			}
		}
	}
	
	/**
	 * Prints the board for the user to see.
	 */
	public void makeMove()
	{
		int counter = 0;	//	Counter for displaying the board.
		
		System.out.println("");
			
		//	Print the board for the user to see.
		for (int i = 0; i < 3; i++)
		{
			for (int j = 0; j < 3; j++)
			{
				counter++;
				
				if (gameboard[i][j].getState() == "EMPTY")
				{
					System.out.print("" + counter + " ");
				}
				else
				{
					System.out.print(gameboard[i][j].getState() + " ");
				}
					
			}
			
			System.out.println("");
		}
	
	}
	
	/**
	 * Returns the state, obtained from updateState.
	 * @param name The name of the player.
	 * @return An int for the state.
	 */
	public int getState(String name)
	{
		return this.updateState(name);
	}
	
	/**
	 * Checks if an end condition is meet.
	 * @param name The name of the current player.
	 * @return 1 if that player wins, 0 otherwise.
	 */
	public int updateState(String name)
	{
		if (checkRow(0) || checkRow(1) || checkRow(2) || checkCol(0) || checkCol(1) || checkCol(2) || checkDiagonals())
		{
			this.makeMove();
			System.out.println(name + " wins!");
			return 1;
		}
		else
		{
			return 0;
		}
	}
	
	/**
	 * Check a given row.
	 * @param b The row number.
	 * @return True if they are all the same state and not empty.
	 */
	public boolean checkRow(int b)
	{
		return this.gameboard[b][0].getState() == this.gameboard[b][1].getState() && this.gameboard[b][0].getState() == this.gameboard[b][2].getState() && this.gameboard[b][0].getState() != "EMPTY";
	}
	
	/**
	 * Check a given column.
	 * @param a The column number.
	 * @return True if they are all the same state and not empty.
	 */
	public boolean checkCol(int a)
	{
		return this.gameboard[0][a].getState() == this.gameboard[1][a].getState() && this.gameboard[0][a].getState() == this.gameboard[2][a].getState() && this.gameboard[0][a].getState() != "EMPTY";
	}
	
	/**
	 * Check the two diagonals.
	 * @return True if one of the diagonals are all the same state and not empty.
	 */
	public boolean checkDiagonals()
	{
		return this.gameboard[0][0].getState() == this.gameboard[1][1].getState() && this.gameboard[0][0].getState() == this.gameboard[2][2].getState() && this.gameboard[0][0].getState() != "EMPTY" || this.gameboard[0][2].getState() == this.gameboard[1][1].getState() && this.gameboard[0][2].getState() == this.gameboard[2][0].getState() && this.gameboard[0][2].getState() != "EMPTY"; 
	}
}
//	Assignment 3
//	Blair Cosgrove (104992533)
//	11/25/2019

package ass3;

import java.util.*;

public class Game implements Global
{
	Board gameboard;	//	The gameboard.
	Player PlayerX;		
	Player PlayerO;
	
	//	Default constructor.
	public Game()
	{
		gameboard = new Board();
	}
	
	/**
	 * Runs the game.
	 */
	public void start()
	{
		Scanner sc = new Scanner(System.in);
		
		int choiceX;	//	Holds the type of player .
		int choiceO;	//	Holds the type of player.
		
		//	Receive the type of player from the user.
		System.out.print("Player 1 (1 for Human, 0 for AI): ");
		choiceX = sc.nextInt();
		System.out.print("Player 2 (1 for Human, 0 for AI): ");
		choiceO = sc.nextInt();
		
		//	Determine which kind of player X is.
		if (choiceX == 1)
		{
			PlayerX = new HumanPlayer();
		}
		else
		{
			PlayerX = new AIPlayer();
		}
		
		//	Determine which kind of player O is.
		if (choiceO == 1)
		{
			PlayerO = new HumanPlayer();
		}
		else
		{
			PlayerO = new AIPlayer();
		}
		
		//	Receive player's names from the user.
		System.out.print("Enter player 1's name: ");
		PlayerX.name = sc.next();
		PlayerX.symbol = "X";
		System.out.print("Enter player 2's name: ");
		PlayerO.name = sc.next();
		PlayerO.symbol = "O";
		
		//	Coin toss to decide who starts.
		System.out.println("Coin toss...");
		int starter = (int) (Math.random() * 2) + 1;
		int currentPlayer = 0;
		
		if (starter == 1)
		{
			System.out.println(PlayerX.name + " won the coin toss. They go first.");
			currentPlayer = 1;
			PlayerX.play(gameboard);
		}
		else if (starter == 2)
		{
			System.out.println(PlayerO.name + " won the coin toss. They go first.");
			currentPlayer = 2;
			PlayerO.play(gameboard);
		}
			
		String name = "";
		int turnCounter = 0;
		
		//	Loop to alternate players taking turns.
		while (gameboard.getState(name) != WIN)
		{
			turnCounter++;
			if (turnCounter == 9)
			{
				if (gameboard.getState(name) == DRAW)
				{
					gameboard.makeMove();
					System.out.println("DRAW");
					break;
				}
			}
			else if (currentPlayer == 1)
			{
				currentPlayer = 2;
				PlayerO.play(gameboard);
				name = PlayerO.name;
			}
			else if(currentPlayer == 2)
			{
				currentPlayer = 1;
				PlayerX.play(gameboard);
				name = PlayerX.name;
			}
			
		}
		
		sc.close();
	}
}
//	Assignment 3
//	Blair Cosgrove (104992533)
//	11/25/2019

package ass3;

public interface Global 
{
	public static final int WIN = 1;
	public static final int DRAW = 0;

}
//	Assignment 3
//	Blair Cosgrove (104992533)
//	11/25/2019

package ass3;

import java.util.*;

public class HumanPlayer extends Player
{
	/**
	 * Allows the player to choose the position they want their symbol in.
	 */
	public void play(Board gameboard) 
	{
		int input = 0;
		gameboard.makeMove();
		
		//	Get input from user.
		Scanner sc = new Scanner(System.in);
		System.out.print(this.name + "'s turn\nEnter position > ");
		input = sc.nextInt();
		
		//	Determine the position in the 2D array to place the symbol.
		if (input < 1 || input > 9)
		{	
			while (input < 1 || input > 9)
			{
				System.out.println("Invalid input.");
				System.out.print(this.name + "'s turn\nEnter position > ");
				input = sc.nextInt();
			}
		}
		else if (input <= 3 && input >= 1)
		{
			gameboard.gameboard[0][input - 1].setState(this.symbol);
		}
		else if (input - 3 <= 3 && input - 3 >= 1)
		{
			gameboard.gameboard[1][input - 4].setState(this.symbol);
		}
		else if (input - 6 <= 3 && input - 6 >= 1)
		{
			gameboard.gameboard[2][input - 7].setState(this.symbol);
		}

	}

}
//	Assignment 3
//	Blair Cosgrove (104992533)
//	11/25/2019

package ass3;

public abstract class Player 
{
	String symbol;		//	X or O
	String name;	
	
	//	Abstract method so that each player can play.
	public abstract void play(Board gameboard);
}
//	Assignment 3
//	Blair Cosgrove (104992533)
//	11/25/2019

package ass3;

public class TicTacToe
{

	public static void main(String[] args) 
	{
		
		Game myGame = new Game();
		
		myGame.start();

	}

}
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src/ass3[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src/ass3[00m$ cd
]0;cosgrovb@bravo: ~[01;32mcosgrovb@bravo[00m:[01;34m~[00m$ cd COMP2120/Assignment3/src
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src[00m$ javac ass3/TicTacToe.java
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src[00m$ java ass3.TicTacToe
Player 1 (1 for Human, 0 for AI): 1
Player 2 (1 for Human, 0 for AI): 1
Enter player 1's name: Blair
Enter player 2's name: Hailey
Coin toss...
Hailey won the coin toss. They go first.

1 2 3 
4 5 6 
7 8 9 
Hailey's turn
Enter position > 1

O 2 3 
4 5 6 
7 8 9 
Blair's turn
Enter position > 7

O 2 3 
4 5 6 
X 8 9 
Hailey's turn
Enter position > 2

O O 3 
4 5 6 
X 8 9 
Blair's turn
Enter position > 8

O O 3 
4 5 6 
X X 9 
Hailey's turn
Enter position > 3

O O O 
4 5 6 
X X 9 
Hailey wins!
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src[00m$ java ass3.TicTacToe
Player 1 (1 for Human, 0 for AI): 1
Player 2 (1 for Human, 0 for AI): 0
Enter player 1's name: Blair
Enter player 2's name: BOT
Coin toss...
Blair won the coin toss. They go first.

1 2 3 
4 5 6 
7 8 9 
Blair's turn
Enter position > 1

X 2 3 
4 5 6 
7 O 9 

X 2 3 
4 5 6 
7 O 9 
Blair's turn
Enter position > 7

X 2 3 
4 O 6 
X O 9 

X 2 3 
4 O 6 
X O 9 
Blair's turn
Enter position > 2

X X 3 
4 O 6 
X O O 

X X 3 
4 O 6 
X O O 
Blair's turn
Enter position > 6

X X 3 
O O X 
X O O 

X X 3 
O O X 
X O O 
Blair's turn
Enter position > 3

X X X 
O O X 
X O O 
Blair wins!
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src[00m$ java ass3.TicTacToe
Player 1 (1 for Human, 0 for AI): 1
Player 2 (1 for Human, 0 for AI): 1
Enter player 1's name: Blair
Enter player 2's name: Hailey
Coin toss...
Blair won the coin toss. They go first.

1 2 3 
4 5 6 
7 8 9 
Blair's turn
Enter position > 1

X 2 3 
4 5 6 
7 8 9 
Hailey's turn
Enter position > 5

X 2 3 
4 O 6 
7 8 9 
Blair's turn
Enter position > 2

X X 3 
4 O 6 
7 8 9 
Hailey's turn
Enter position > 3

X X O 
4 O 6 
7 8 9 
Blair's turn
Enter position > 7

X X O 
4 O 6 
X 8 9 
Hailey's turn
Enter position > 4

X X O 
O O 6 
X 8 9 
Blair's turn
Enter position > 6

X X O 
O O X 
X 8 9 
Hailey's turn
Enter position > 8

X X O 
O O X 
X O 9 
Blair's turn
Enter position > 9

X X O 
O O X 
X O X 
DRAW
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src[00m$ java ass3.TicTacToe
Player 1 (1 for Human, 0 for AI): 0
Player 2 (1 for Human, 0 for AI): 0
Enter player 1's name: BOT 1  1
Enter player 2's name: BOT2
Coin toss...
BOT1 won the coin toss. They go first.

X 2 3 
4 5 6 
7 8 9 

X 2 O 
4 5 6 
7 8 9 

X 2 O 
X 5 6 
7 8 9 

X 2 O 
X 5 6 
7 O 9 

X 2 O 
X 5 X 
7 O 9 

X 2 O 
X O X 
7 O 9 

X 2 O 
X O X 
X O 9 

X 2 O 
X O X 
X O 9 
BOT1 wins!
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src[00m$ exit[K[K[K[Kls -l[K[K[K[K[Kcd ass3
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src/ass3[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src/ass3[00m$ ls -l
total 28
-rw-r--r-- 1 cosgrovb temp  638 Nov 29 17:29 AIPlayer.class
-rw-r--r-- 1 cosgrovb temp  566 Nov 28 17:10 AIPlayer.java
-rw-r--r-- 1 cosgrovb temp  527 Nov 29 17:29 Block.class
-rw-r--r-- 1 cosgrovb temp  744 Nov 25 20:08 Block.java
-rw-r--r-- 1 cosgrovb temp 1823 Nov 29 17:29 Board.class
-rw-r--r-- 1 cosgrovb temp 2953 Nov 28 16:40 Board.java
-rw-r--r-- 1 cosgrovb temp 2039 Nov 29 17:29 Game.class
-rw-r--r-- 1 cosgrovb temp 2397 Nov 28 16:43 Game.java
-rw-r--r-- 1 cosgrovb temp  173 Nov 29 17:29 Global.class
-rw-r--r-- 1 cosgrovb temp  187 Nov 26 17:34 Global.java
-rw-r--r-- 1 cosgrovb temp 1217 Nov 29 17:29 HumanPlayer.class
-rw-r--r-- 1 cosgrovb temp 1125 Nov 28 15:14 HumanPlayer.java
-rw-r--r-- 1 cosgrovb temp  277 Nov 29 17:29 Player.class
-rw-r--r-- 1 cosgrovb temp  263 Nov 25 19:02 Player.java
-rw-r--r-- 1 cosgrovb temp  326 Nov 29 17:38 TicTacToe.class
-rw-r--r-- 1 cosgrovb temp  224 Nov 25 20:27 TicTacToe.java
]0;cosgrovb@bravo: ~/COMP2120/Assignment3/src/ass3[01;32mcosgrovb@bravo[00m:[01;34m~/COMP2120/Assignment3/src/ass3[00m$ exit
exit

Script done on Fri 29 Nov 2019 05:40:50 PM EST
